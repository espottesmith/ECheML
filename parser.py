import os
import re
from json import dump
from bs4 import BeautifulSoup
from openbabel.pybel import readstring
from selfies import encoder

class ReaxysParser:
    def __init__(self, base_dir):
        """
        ReaxysScraper
        :param base_dir: Base directory for parsing and generating data.
        """

        self.base_dir = base_dir


    def find_all_text(self, bsobj, tag_name):
        """
        Function to parse a text list from a BeautifulSoup element.
        :param bsobj: BeautifulSoup element to be parsed.
        :param tag_name: name of the tag to be parsing for.
        :return: parsed text list.
        """
        return_list = []

        tag_list = bsobj.find_all(tag_name)
        for tag_obj in tag_list:
            return_list.append(tag_obj.text)

        return return_list


    def parse_reaxys_reaction_xml(self, filename):
        """
        Parses an XML file generated by the Reaxys API.
        :param filename: str referring to XML file from Reaxys.
        :return: list of dicts of pertinent reaction information.
        """

        results = []

        filepath = os.path.join(self.base_dir, filename)

        with open(filepath, 'r') as fileobj:
            xml = fileobj.read()
            parsed = BeautifulSoup(xml, "lxml-xml")

            reactions = parsed.find_all("reaction")

            for reaction in reactions:
                # Screen for reactions with no products or no reactants
                pro_ct = reaction.find_all("RY.PRO")
                rct_ct = reaction.find_all("RY.RCT")
                if (len(pro_ct) == 0) or (len(rct_ct) == 0):
                    continue

                # Get unique reaction ID
                rxn_id = int(reaction.find("RX.ID").text)

                # Get reactant information:
                # SMILES, SELFIES, Beilstein Registry Number, and name for each reactant
                rct_smiles = []
                rct_selfies = []
                molfiles_rct = reaction.find_all("RY.PRO")
                for reactant in molfiles_rct:
                    mymol = readstring("mol", reactant.text)
                    smi = mymol.write(str("smi")).split()[0]
                    rct_smiles.append(smi)
                    slf = encoder(smi)
                    rct_selfies.append(slf)
                reactants = {"beilstein_rn": [int(i) for i in self.find_all_text(reaction, "RX.RXRN")],
                             "names": self.find_all_text(reaction, "RX.RCT"),
                             "smiles": rct_smiles,
                             "selfies": rct_selfies}

                # Get product information:
                # SMILES, SELFIES, Beilstein Registry Number, and name for each product
                pro_smiles = []
                pro_selfies = []
                molfiles_pro = reaction.find_all("RY.RCT")
                for product in molfiles_pro:
                    mymol = readstring("mol", product.text)
                    smi = mymol.write(str("smi")).split()[0]
                    pro_smiles.append(smi)
                    slf = encoder(smi)
                    pro_selfies.append(slf)
                products = {"beilstein_rn": [int(i) for i in self.find_all_text(reaction, "RX.PXRN")],
                            "names": self.find_all_text(reaction, "RX.PRO"),
                            "smiles": pro_smiles,
                            "selfies": pro_selfies}

                # mapped, non-mapped, or half reaction
                rxn_mapped = reaction.find("RX.SKW").text

                # Get list of dictionaries of procedures
                # Collects reagents, catalysts, solvents, conditions, yield, and experimental text for each procedure
                return_procedure = []
                all_procedures = reaction.find_all("RXD")
                for procedure in all_procedures:
                    reagents = {"beilstein_rn": [int(i) for i in self.find_all_text(procedure, "RXD.RGTXRN")],
                                "names": self.find_all_text(procedure, "RXD.RGT")}
                    catalysts = {"beilstein_rn": [int(i) for i in self.find_all_text(procedure, "RXD.CATXRN")],
                                 "names": self.find_all_text(procedure, "RXD.CAT")}
                    solvents = {"beilstein_rn": [int(i) for i in self.find_all_text(procedure, "RXD.SOLXRN")],
                                "names": self.find_all_text(procedure, "RXD.SOL")}
                    try:
                        rxn_yield = float(procedure.find("RXD.NYD").text)
                    except:
                        rxn_yield = None
                    try:
                        exp_text = procedure.find("RXD.TXT").text
                    except:
                        exp_text = None
                    procedure_dict = {"reagents": reagents,
                                      "catalysts": catalysts,
                                      "solvents": solvents,
                                      "conditions": self.find_all_text(procedure, "RXD.COND"),
                                      "yield": rxn_yield,
                                      "exp_text": exp_text}
                    return_procedure.append(procedure_dict)

                return_reaction = {"reaction_id": rxn_id,
                                   "reaction_mapped": rxn_mapped,
                                   "reactants": reactants,
                                   "products": products,
                                   "procedures": return_procedure}

                results.append(return_reaction)

        return results


    def collect_rn(self, reaction_dictlist, ini_rn=set()):
        """
        Creates/Adds to a set of Beilstein Registry Numbers for catalysts, solvents, and reagents.
        :param reaction_dictlist: list of dicts, output of parse_reaxys_reaction_xml().
        :param ini_rn: initial set of Beilstein Registry Numbers to be added to.
        :return: new list of Beilstein Registry Numbers.
        """
        return_rn = ini_rn

        for reaction in reaction_dictlist:
            for procedure in reaction["procedures"]:

                # adds catalyst registry numbers to list
                catalyst = procedure["catalysts"]["beilstein_rn"]
                for i in catalyst:
                    return_rn.add(i)

                # adds solvent registry numbers to list
                solvent = procedure["solvents"]["beilstein_rn"]
                for i in solvent:
                    return_rn.add(i)

                # adds reagent registry numbers to list
                reagent = procedure["reagents"]["beilstein_rn"]
                for i in reagent:
                    return_rn.add(i)

        return return_rn


    def save_to_json(self, dict_list, filename):
        """
        Saves list of dicts to a JSON file
        :param dict_list: list of dicts to be written to JSON file.
        :param filename: name of JSON file without extension
        :return: bool if successful in saving file
        """
        try:
            with open(filename + ".json", "w") as outfile:
                dump(dict_list, outfile)
            return True
        except:
            return False


# start of parsing code

parser = ReaxysParser("/Users/nikitaredkar/Documents/COLLEGE/Research/PerssonLab/DATA/")
filenames = ["oxidation_1_2640", "reduction_1_2524", "electrolysis_1_4911", "electrochemical_85001_85072"]

rn_set = set()
i = 0
while i < 80000:
    filename = "electrochemical_" + str(i+1) + "_" + str(i+5000)
    filenames.append(filename)
    i+=5000

for file in filenames:
    results = parser.parse_reaxys_reaction_xml(file+".xml")
    parser.save_to_json(results, file)
    rn_set = parser.collect_rn(results, rn_set)
    print("finished iteration " + file)

rn_string = ""

for rn in rn_set:
    rn_string = rn_string + ";" + rn

save_rn = open("registrynumbers.txt", "w")
save_rn.write(rn_string)
save_rn.close()


